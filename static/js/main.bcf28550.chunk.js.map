{"version":3,"sources":["components/Carousel.js","App.js","index.js"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","startLeftPoint","startTranslateX","useState","translateX","setTranslateX","isLeftButtonDisabled","setIsLeftButtonDisabled","isRightButtonDisabled","setIsRightButtonDisabled","currentLeftPoint","setCurrentLeftPoint","renderedArray","setRenderedArray","fullSize","useMemo","noAnimation","setNoAnimation","maxRightSlade","length","slideByStep","useEffect","generateArr","useCallback","leftPoint","startIndex","Math","abs","infinityArr","count","i","push","onSlide","name","prev","setTimeout","styleFocus","transform","transition","focusWith","classes","useArrowDarkButtonStyles","className","style","width","height","map","image","index","key","src","alt","Button","disabled","onClick","App","setStep","setFrameSize","setItemWidth","setInfinite","marksMaker","min","max","scaleDiv","arr","value","label","Grid","container","spacing","item","xs","sm","FormControlLabel","control","Checkbox","checked","onChange","color","Typography","id","gutterBottom","Slider","defaultValue","e","aria-labelledby","marks","valueLabelDisplay","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcf28550.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-plusplus */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport { useArrowDarkButtonStyles }\n  from '@mui-treasury/styles/button/arrowDark';\nimport PropTypes from 'prop-types';\nimport './Carousel.scss';\n\nconst Carousel = ({\n  images, step, frameSize, itemWidth,\n  animationDuration, infinite, startLeftPoint, startTranslateX,\n}) => {\n  const [translateX, setTranslateX] = useState(startTranslateX);\n  const [isLeftButtonDisabled, setIsLeftButtonDisabled] = useState(false);\n  const [isRightButtonDisabled, setIsRightButtonDisabled] = useState(false);\n  const [currentLeftPoint, setCurrentLeftPoint] = useState(startLeftPoint);\n  const [renderedArray, setRenderedArray] = useState(images);\n  const fullSize = useMemo(() => (step * 2 + frameSize), [step, frameSize]);\n  const [noAnimation, setNoAnimation] = useState(false);\n  const maxRightSlade = useMemo(() => (\n    images.length * itemWidth - frameSize * itemWidth), [itemWidth, frameSize]);\n  const slideByStep = useMemo(() => (\n    translateX + step * itemWidth),\n  [itemWidth, translateX, step]);\n\n  useEffect(() => {\n    setTranslateX(startTranslateX);\n    setRenderedArray(infinite ? generateArr(startLeftPoint) : images);\n    setIsRightButtonDisabled(false);\n    setIsLeftButtonDisabled(!infinite);\n    setNoAnimation(false);\n  }, [infinite, startTranslateX, itemWidth, frameSize]);\n\n  const generateArr = useCallback((leftPoint) => {\n    if (!infinite) {\n      return images;\n    }\n\n    const startIndex = (leftPoint > images.length || leftPoint < 0)\n      ? Math.abs(Math.abs(leftPoint) - images.length)\n      : leftPoint;\n    const infinityArr = [];\n\n    let count = startIndex;\n\n    for (let i = 0; i < fullSize; i++) {\n      count = (count > images.length - 1)\n        ? 0\n        : count;\n      infinityArr.push(images[count]);\n      count++;\n    }\n\n    setCurrentLeftPoint(startIndex);\n\n    return infinityArr;\n  }, [currentLeftPoint, fullSize, infinite]);\n\n  const onSlide = (name) => {\n    switch (name) {\n      case 'rightButton':\n        setCurrentLeftPoint(prev => (infinite ? prev + step : prev));\n        setTranslateX(prev => (infinite || slideByStep < maxRightSlade\n          ? prev + step * itemWidth\n          : maxRightSlade));\n        setIsLeftButtonDisabled(infinite);\n        setIsRightButtonDisabled(slideByStep >= maxRightSlade || infinite);\n        if (infinite) {\n          setNoAnimation(false);\n          setTimeout(() => {\n            setNoAnimation(true);\n            setTranslateX(step * itemWidth);\n            setRenderedArray(generateArr(currentLeftPoint + step));\n            setIsLeftButtonDisabled(false);\n            setIsRightButtonDisabled(false);\n          }, 1000);\n        }\n\n        break;\n      case 'leftButton':\n        setCurrentLeftPoint(prev => (infinite ? prev - step : prev));\n        setTranslateX(prev => (infinite || translateX > itemWidth * step\n          ? prev - step * itemWidth\n          : 0));\n        setIsLeftButtonDisabled(infinite || translateX <= itemWidth * step);\n        setIsRightButtonDisabled(infinite);\n        if (infinite) {\n          setNoAnimation(false);\n          setTimeout(() => {\n            setNoAnimation(true);\n            setTranslateX(step * itemWidth);\n            setRenderedArray(generateArr(currentLeftPoint - step));\n            setIsLeftButtonDisabled(false);\n            setIsRightButtonDisabled(false);\n          }, 1000);\n        }\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  const styleFocus = (!noAnimation)\n    ? {\n      transform: `translateX(-${translateX}px)`,\n      transition: `${animationDuration}ms`,\n    }\n    : {\n      transform: `translateX(-${translateX}px)`,\n    };\n\n  const focusWith = useMemo(() => (\n    itemWidth * frameSize), [itemWidth, frameSize]);\n\n  const classes = useArrowDarkButtonStyles();\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{ width: `${itemWidth * (frameSize + 1)}px` }}\n    >\n      <div\n        style={{\n          width: `${focusWith}px`,\n          height: `${itemWidth}px`,\n        }}\n        className=\"focus\"\n      >\n        <ul\n          style={styleFocus}\n          className=\"Carousel__list\"\n        >\n          {renderedArray.map((image, index) => (\n            <li key={index}>\n              <img\n                src={image}\n                alt={index + 1}\n                width={itemWidth}\n                height={itemWidth}\n              />\n            </li>\n          ))}\n\n        </ul>\n      </div>\n      <div\n        className=\"buttons\"\n        style={{ width: `${(frameSize + 1) * itemWidth}px` }}\n      >\n        <Button\n          classes={classes}\n          name=\"leftButton\"\n          disabled={isLeftButtonDisabled}\n          onClick={() => onSlide('leftButton')}\n        >\n          <KeyboardArrowLeft />\n        </Button>\n        <Button\n          classes={classes}\n          name=\"rightButton\"\n          disabled={isRightButtonDisabled}\n          onClick={() => onSlide('rightButton')}\n        >\n          <KeyboardArrowRight />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nCarousel.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.string).isRequired,\n  step: PropTypes.number.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  itemWidth: PropTypes.number.isRequired,\n  animationDuration: PropTypes.number.isRequired,\n  infinite: PropTypes.bool.isRequired,\n  startTranslateX: PropTypes.bool.isRequired,\n  startLeftPoint: PropTypes.bool.isRequired,\n};\n\nexport default Carousel;\n","import React, { useState, useMemo, useCallback } from 'react';\nimport './App.scss';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Carousel from './components/Carousel';\n\nconst App = () => {\n  const images = useMemo(() => ([\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]\n  ), []);\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const animationDuration = useMemo(() => 1000, []);\n  const [infinite, setInfinite] = useState(false);\n  const marksMaker = useCallback((min, max, scaleDiv) => {\n    const arr = [];\n    let count = min;\n\n    do {\n      arr.push({\n        value: count,\n        label: count,\n      });\n      count += scaleDiv;\n    }\n    while (count <= max);\n\n    return arr;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <form>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={infinite}\n                  onChange={() => setInfinite(!infinite)}\n                  color=\"primary\"\n                />\n                  )}\n              label=\"Infinity\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Typography id=\"discrete-slider-always\" gutterBottom>\n              Frame size\n            </Typography>\n            <Slider\n              defaultValue={130}\n              value={frameSize}\n              onChange={(e, value) => setFrameSize(value)}\n              aria-labelledby=\"discrete-slider-small-steps\"\n              step={1}\n              marks={marksMaker(2, 6, 2)}\n              min={1}\n              max={6}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Typography id=\"discrete-slider-small-steps\" gutterBottom>\n              Item Width\n            </Typography>\n            <Slider\n              defaultValue={130}\n              value={itemWidth}\n              onChange={(e, value) => setItemWidth(value)}\n              aria-labelledby=\"discrete-slider-small-steps\"\n              step={5}\n              marks={marksMaker(110, 220, 25)}\n              min={110}\n              max={220}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Typography id=\"discrete-slider-small-steps\" gutterBottom>\n              Slide Step\n            </Typography>\n            <Slider\n              defaultValue={130}\n              value={step}\n              onChange={(e, value) => setStep(value)}\n              aria-labelledby=\"discrete-slider-small-steps\"\n              step={1}\n              marks={marksMaker(2, 6, 2)}\n              min={1}\n              max={6}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </form>\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n        startLeftPoint={!infinite ? 0 : images.length - step}\n        startTranslateX={!infinite ? 0 : itemWidth * step}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}