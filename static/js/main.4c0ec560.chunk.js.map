{"version":3,"sources":["components/Carousel.js","App.js","index.js"],"names":["Carousel","state","translateX","props","startTranslateX","isLeftButtonDisabled","isRightButtonDisabled","currentLeftPoint","startLeftPoint","renderedArray","images","fullSize","step","frameSize","noAnimation","generateArr","infinite","sourceArr","leftPoint","startIndex","length","Math","abs","infinityArr","count","i","push","setState","slideRight","maxRightSlade","itemWidth","slideByStep","setTimeout","slideLeft","PrevProps","this","animationDuration","styleFocus","transform","transition","focusWith","className","style","width","map","image","index","key","src","alt","disabled","type","onClick","left","React","Component","App","handleChange","event","target","name","value","checked","parseFloat","placeHolder","onChange","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c0ec560.chunk.js","sourcesContent":["/* eslint-disable no-lonely-if */\n/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable no-unreachable */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-plusplus */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Carousel.scss';\n\nclass Carousel extends React.Component {\n  state = {\n    translateX: this.props.startTranslateX,\n    isLeftButtonDisabled: true,\n    isRightButtonDisabled: false,\n    currentLeftPoint: this.props.startLeftPoint,\n    renderedArray: this.props.images,\n    fullSize: this.props.step * 2 + this.props.frameSize,\n    noAnimation: false,\n  }\n\n  componentDidUpdate(PrevProps) {\n    if (PrevProps !== this.props) {\n      this.setState({\n        noAnimation: false,\n        fullSize: this.props.step * 2 + this.props.frameSize,\n        isLeftButtonDisabled: !this.props.infinite,\n        isRightButtonDisabled: false,\n        translateX: this.props.startTranslateX,\n        currentLeftPoint: this.props.startLeftPoint,\n        renderedArray: this.generateArr(\n          this.props.step * 2 + this.props.frameSize,\n          this.props.infinite,\n          this.props.images,\n          this.props.images.length - this.props.step,\n        ),\n      });\n    }\n  }\n\n  generateArr = (fullSize, infinite, sourceArr, leftPoint) => {\n    const startIndex = (leftPoint >= sourceArr.length || leftPoint < 0)\n      ? Math.abs(Math.abs(leftPoint) - sourceArr.length)\n      : leftPoint;\n    const infinityArr = [];\n\n    let count = startIndex;\n\n    for (let i = 0; i < fullSize; i++) {\n      count = (count > sourceArr.length - 1)\n        ? 0\n        : count;\n      infinityArr.push(sourceArr[count]);\n      count++;\n    }\n\n    if (!infinite) {\n      return sourceArr;\n    }\n\n    this.setState({\n      currentLeftPoint: startIndex,\n    });\n\n    return infinityArr;\n  }\n\n  slideRight = () => {\n    const maxRightSlade = this.props.images.length * this.props.itemWidth\n      - this.props.frameSize * this.props.itemWidth;\n    const slideByStep = this.state.translateX\n      + this.props.step * this.props.itemWidth;\n\n    if (this.props.infinite) {\n      this.setState(state => ({\n        currentLeftPoint: state.currentLeftPoint + this.props.step,\n        translateX: state.translateX + this.props.step * this.props.itemWidth,\n        isLeftButtonDisabled: true,\n        isRightButtonDisabled: true,\n        noAnimation: false,\n      }));\n      setTimeout(() => {\n        this.setState(state => ({\n          noAnimation: true,\n          renderedArray: this.generateArr(\n            state.fullSize,\n            this.props.infinite,\n            this.props.images,\n            state.currentLeftPoint,\n          ),\n          isRightButtonDisabled: false,\n          isLeftButtonDisabled: false,\n          translateX: (this.props.step) * this.props.itemWidth,\n        }));\n      }, 1000);\n    } else {\n      if (slideByStep < maxRightSlade) {\n        this.setState(state => ({\n          translateX: state.translateX\n            + (this.props.step * this.props.itemWidth),\n          isLeftButtonDisabled: false,\n        }));\n      } else {\n        this.setState({\n          translateX: maxRightSlade,\n          isRightButtonDisabled: true,\n          isLeftButtonDisabled: false,\n        });\n      }\n    }\n  }\n\n  slideLeft = () => {\n    if (this.props.infinite) {\n      this.setState(state => ({\n        currentLeftPoint: state.currentLeftPoint - this.props.step,\n        translateX: state.translateX - (this.props.step * this.props.itemWidth),\n        isLeftButtonDisabled: true,\n        isRightButtonDisabled: true,\n        noAnimation: false,\n      }));\n      setTimeout(() => {\n        this.setState(state => ({\n          noAnimation: true,\n          renderedArray: this.generateArr(\n            state.fullSize,\n            this.props.infinite,\n            this.props.images,\n            state.currentLeftPoint,\n            this.props.step,\n            this.props.frameSize,\n          ),\n          isRightButtonDisabled: false,\n          isLeftButtonDisabled: false,\n          translateX: (this.props.step) * this.props.itemWidth,\n        }));\n      }, 1000);\n    } else {\n      if (this.state.translateX > this.props.step * this.props.itemWidth) {\n        this.setState(state => ({\n          translateX: state.translateX\n            - (this.props.step * this.props.itemWidth),\n          isRightButtonDisabled: false,\n        }));\n      } else {\n        this.setState({\n          translateX: 0,\n          isLeftButtonDisabled: true,\n          isRightButtonDisabled: false,\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      translateX,\n      isLeftButtonDisabled,\n      isRightButtonDisabled,\n      renderedArray,\n      noAnimation,\n    } = this.state;\n    const {\n      step, frameSize, itemWidth, animationDuration, infinite,\n    } = this.props;\n\n    const styleFocus = (!noAnimation)\n      ? {\n        transform: `translateX(-${translateX}px)`,\n        transition: `${animationDuration}ms`,\n      }\n      : {\n        transform: `translateX(-${translateX}px)`,\n      };\n\n    const focusWith = itemWidth * frameSize;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{ width: `${itemWidth * (frameSize + 1)}px` }}\n      >\n        <div style={{ width: `${focusWith}px` }} className=\"focus\">\n          <ul\n            style={styleFocus}\n            className=\"Carousel__list\"\n          >\n            {renderedArray.map((image, index) => (\n              <li key={index}>\n                <img src={image} alt={index + 1} />\n              </li>\n            ))}\n\n          </ul>\n        </div>\n        <button\n          className=\"button\"\n          disabled={isLeftButtonDisabled}\n          type=\"button\"\n          onClick={() => (\n            this.slideLeft(step, translateX, itemWidth, infinite)\n          )}\n        >\n          ←\n        </button>\n        <button\n          className=\"button\"\n        // 50px - button width\n          style={{ left: `${itemWidth * (frameSize + 1) - 50}px` }}\n          disabled={isRightButtonDisabled}\n          type=\"button\"\n          onClick={() => (\n            this.slideRight(step, frameSize, translateX, itemWidth, infinite)\n          )}\n        >\n          →\n        </button>\n      </div>\n    );\n  }\n}\n\nCarousel.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.string).isRequired,\n  step: PropTypes.number.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  itemWidth: PropTypes.number.isRequired,\n  animationDuration: PropTypes.number.isRequired,\n  infinite: PropTypes.bool.isRequired,\n  startTranslateX: PropTypes.bool.isRequired,\n  startLeftPoint: PropTypes.bool.isRequired,\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\n\nimport Carousel from './components/Carousel';\n\nclass App extends React.Component {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChange = (event) => {\n    const { name, value, type, checked } = event.target;\n\n    this.setState({\n      [name]: type === 'checkbox' ? checked : parseFloat(value),\n    });\n  };\n\n  render() {\n    const { images, step, itemWidth, frameSize, animationDuration, infinite }\n    = this.state;\n\n    return (\n      <div className=\"App\">\n        <form>\n          <label>\n            Step of slide:\n            <input\n              type=\"number\"\n              name=\"step\"\n              placeHolder=\"Step\"\n              value={this.state.step}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            Frame size:\n            <input\n              type=\"number\"\n              name=\"frameSize\"\n              placeHolder=\"Frame size\"\n              value={this.state.frameSize}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label>\n            Item width:\n            <input\n              type=\"number\"\n              name=\"itemWidth\"\n              placeholder=\"Item width\"\n              value={this.state.itemWidth}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label\n            className=\"checkbox\"\n          >\n            Infinity option\n            <input\n              type=\"checkbox\"\n              name=\"infinite\"\n              placeholder=\"Infinity\"\n              checked={this.state.infinite}\n              onChange={this.handleChange}\n            />\n          </label>\n        </form>\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          startLeftPoint={!infinite ? 0 : images.length - step}\n          startTranslateX={!infinite ? 0 : itemWidth * step}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}